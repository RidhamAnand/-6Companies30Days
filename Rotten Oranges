class Solution {
   public static int orangesRotting(int[][] grid) {

            int time=0;
            int total=0;
            int rottened = 0;

            Queue<int[]> queue = new LinkedList<>();
            boolean[][] isVisited = new boolean[grid.length][grid[0].length];

            for (int i=0;i<grid.length;i++){
                for (int j=0;j<grid[0].length;j++){
                    if (grid[i][j]==2) {
                        queue.add(new int[]{i, j});
                        isVisited[i][j] = true;
                        rottened++;
                    }
                    if (grid[i][j]!=0) total++;

                }
            }

            if (queue.isEmpty() && total!=0) return -1;


            while (!queue.isEmpty()){

                    int elem = queue.size();

                    boolean isRottened = false;

                    for (int i=0;i<elem;i++){
                        int[] rottenOrange = queue.poll();
                        int row=rottenOrange[0];
                        int col=rottenOrange[1];
                        isVisited[row][col] = true;

                        //                    up
                        if (row>0){
                            if (!isVisited[row-1][col] && grid[row-1][col]!=0){
                                rottened++;
                                isVisited[row-1][col] = true;
                                isRottened=true;
                                queue.add(new int[]{row-1,col});
                            }
                        }


    //                    down
                        if(row<grid.length-1){
                            if(!isVisited[row+1][col] && grid[row+1][col]!=0){
                                rottened++;
                                isRottened=true;
                                isVisited[row+1][col] = true;
                                queue.add(new int[]{row+1,col});
                            }
                        }

    //                    right

                        if (col<grid[0].length-1){
                            if (!isVisited[row][col+1] && grid[row][col+1]!=0){
                                rottened++;
                                isRottened=true;
                                isVisited[row][col+1] = true;
                                queue.add(new int[]{row,col+1});
                            }
                        }
//left
                        if (col>0){
                            if(!isVisited[row][col-1] && grid[row][col-1]!=0){
                                rottened++;
                                isRottened=true;
                                isVisited[row][col-1] = true;
                                queue.add(new int[]{row,col-1});
                            }
                        }



                    }

                    if(isRottened) time++;

            }

           return (total==rottened ? time : -1);
    }
}
